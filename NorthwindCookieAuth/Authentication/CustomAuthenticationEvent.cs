using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;

namespace NorthwindCookieAuth.Authentication
{
    public class CustomAuthenticationEvent:CookieAuthenticationEvents
    {
        public override async Task ValidatePrincipal(CookieValidatePrincipalContext context)
        {
            var lastChangedFromDb=DateTime.Now.AddMinutes(-1);
            var user=context.Principal;
            // To have latest claim we should use database instead of User Claims Principal 
            // One way to get frm db is to use UserManage in Identity for example
            foreach (var claim in user.Claims)
            {
                Console.WriteLine(@"{0}:{1}",claim.Type,claim.Value);
            }
            var lastChangeFromClaim=DateTime.Parse(user.Claims.SingleOrDefault(c =>c.Type=="Modified")?.Value);
            if (string.IsNullOrEmpty(lastChangedFromDb.ToLongDateString()) || lastChangedFromDb>lastChangeFromClaim) {
                // This make the request treated as Anynomous
                context.RejectPrincipal();

                // If you want to non-destructively update the user principal, call context.ReplacePrincipal and set the context.ShouldRenew property to true.
                // context.ReplacePrincipal(user);
                // context.ShouldRenew=true;

                // This send a clear cookie with response generated by later middlewares
                await context.HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            }
        }
    }
}