export function compareStudent(student,minAge) {
    console.log("Min Age: ",minAge);
    console.log("I am called!");
    var name=Blazor.platform.readStringField(student,0);// read student object position 0 for a string
    console.log("Name: ",name);
    var age=Blazor.platform.readInt32Field(student,8);
    console.log("Age: ",age);
    // if (age>minAge)
    // return true; // true is same in both environment. It saves as a byte with 1 or 0 at first digit!
    // else 
    // return false;
    return age>minAge;
}

export function generateFullInfo(student) {
    // Use Blazor.platform.read... to read an offset point in a struct which passed from .NET
    // to define offset point in struct study StructLayout and Explicit Struct Layout which generated by using FieldOffset attribute
    var name=Blazor.platform.readStringField(student,0);
    var age=Blazor.platform.readInt32Field(student,8);
    var str=`${name} has ${age} years old!`;
    // Use BINDING to return .NET types as returning value of functions in JS
    return BINDING.js_string_to_mono_string(str);
}

export function returnStudent(student) {
    var name=Blazor.platform.readStringField(student,0);
    var age=Blazor.platform.readInt32Field(student,8);
    console.log("Name:",name," Age:",age);
    // var x= BINDING.js_to_mono_obj({Name:name,Age:age}); // Does not return an student as it seems!
    // var xname=Blazor.platform.readStringField(x,0);
    // var xage=Blazor.platform.readInt32Field(x,8);
    // console.log("XName:",xname," XAge:",xage);
    // return x;
    return student;
}

export function workWithElements(elementStruct) {
    // console.log(elementStruct);
    var element=Blazor.platform.readStringField(elementStruct,8);
    console.log(element);
    // element.innerHtml="This is a test for Element Reference!";
    return true;   
}

class Student {
    constructor() {
        this.name = "AliReza";
        this.age = 29;
        return this;
    }
}
export function returnStudentObjectRef(name,age) {
    console.log(name);
    return {getStudent:function(){return new Student();}};
    // return {getStudent:function(){return {age:22,name:"Shahrzad"};}};
    // return BINDING.js_to_mono_obj(new Student());
}