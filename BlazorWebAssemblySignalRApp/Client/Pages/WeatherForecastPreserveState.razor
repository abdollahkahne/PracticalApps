@page "/weather-forecast"
@using BlazorWebAssemblySignalRApp.Shared
@inject PersistentComponentState ApplicationState
@inject HttpClient Http
@implements IDisposable

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private PersistingComponentStateSubscription stateSubscription;
    // This is used for disposal of registeration at component disposal to prevent unrequired persisting

    protected override async Task OnInitializedAsync()
    {
        stateSubscription = ApplicationState.RegisterOnPersisting(persistForecasts);
        // the above register the callback but it run on Pause created by PersistComponentState after prerendering

        // Test that does we are in browser rendering? It is true if state exist.
        if (ApplicationState.TryTakeFromJson<WeatherForecast[]?>("weatherforecast", out var weatherForecast))
        {
            forecasts = weatherForecast;// We are on browser
        }
        else
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("http://localhost:5104/WeatherForecast");
            //we are on server prerender
        }
    }
    private Task persistForecasts()
    {
        ApplicationState.PersistAsJson("weatherforecast", forecasts);
        return Task.CompletedTask;
    }
    //Disposal of added callback if the component should disposed like other event handler subscription
    public void Dispose()
    {
        stateSubscription.Dispose(); // Unsubscribe event handler
    }

}
