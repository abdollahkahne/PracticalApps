@page "/cancel-background"
@inject ILogger<BackgroundWork> _logger
@implements IDisposable

<div>


    <button @onclick="LongRunningWork">Trigger long running work</button>
    <button @onclick="Dispose">Trigger Disposal</button>


</div>

@code {
    private BackgroundResource _resource = new();
    private CancellationTokenSource cts = new();
    protected async Task LongRunningWork()
    {
        _logger.LogInformation("Long running work started");
        await Task.Delay(5000, cts.Token);
        cts.Token.ThrowIfCancellationRequested();
        _resource.BackgroundResourceMethod(_logger); // we can even send token as argument
    }

    public void Dispose()
    {
        _logger.LogInformation("Executing Dispose");
        cts.Cancel();
        cts.Dispose();
        _resource.Dispose();
    }
    public class BackgroundResource : IDisposable
    {
        private bool disposed { get; set; }
        public void BackgroundResourceMethod(ILogger<BackgroundWork> logger)
        {
            logger.LogInformation("BackgroundResourceMethod: Start method");
            if (disposed)
            {
                logger.LogInformation("BackgroundResourceMethod: Disposed");
                throw new ObjectDisposedException("BackgroundResourceInstance");
            }
            logger.LogInformation("BackgroundResourceMethod: Action on Resource");
        }
        public void Dispose()
        {
            disposed = true; // we only simulate dispose
        }
    }
}