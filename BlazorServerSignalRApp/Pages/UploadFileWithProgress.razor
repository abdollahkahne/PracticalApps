@page "/upload-file-with-progress"
@inject ILogger<UploadFileWithProgress> _logger

<div>
    <p>Upload up to @maxFileCount files with maximum size 15MB</p>
    <InputFile OnChange="OnGetFileSelected" multiple />
</div>
@if (isLoading)
{
    <p>Progress: @string.Format("{0:P0}",progressPercent)</p>
}
else
{
    <ol>
    @foreach (var item in loadedFiles)
        {
<li>
    <ul>
        <li>File Name: @item.Name</li>
        <li>Last Modified: @item.LastModified</li>
        <li>File Size: @item.Size</li>
        <li>Content Type: @item.ContentType</li>
    </ul>
</li>
        }
    </ol>
}

@code {
    private decimal progressPercent = 0;
    private readonly int maxFileCount = 3;
    private readonly long maxFileSize = 15 * 1024 * 1024;
    private List<IBrowserFile> loadedFiles = new();
    private bool isLoading = false;
    private async Task OnGetFileSelected(InputFileChangeEventArgs e)
    {
        progressPercent = 0;
        loadedFiles.Clear(); // clear items of a list
        isLoading = true;
        foreach (var item in e.GetMultipleFiles(maxFileCount))
        {
            try
            {
                var trustedFileForStorage = Path.GetRandomFileName();
                var path = Path.Combine(Environment.CurrentDirectory, "Uploaded", trustedFileForStorage);
                using (var writeStream = new FileStream(path, FileMode.Create))
                {
                    // The following file better to open with using since it possibly uses some file stream in back
                    using (var readStream = item.OpenReadStream(maxFileSize))
                    {
                        int bytesReadInThisStep = 0;
                        long totalBytesRead = 0;
                        var buffer = new byte[1024 * 10]; // This should be lower than 30K for security and performance
                        while ((bytesReadInThisStep = await readStream.ReadAsync(buffer)) != 0) // while it can read stream
                        {
                            totalBytesRead += bytesReadInThisStep;
                            await writeStream.WriteAsync(buffer, 0, bytesReadInThisStep);
                            @* await writeStream.WriteAsync(buffer); // this is true too *@
                            progressPercent = Decimal.Divide(totalBytesRead, item.Size);
                            StateHasChanged();
                        }
                    }
                }
                loadedFiles.Add(item);
            }
            catch (System.Exception ex)
            {

                _logger.LogError("File:{filename} can not be uploaded with message:{message}", item.Name, ex.Message);
            }

        }
        isLoading = false;
    }
}