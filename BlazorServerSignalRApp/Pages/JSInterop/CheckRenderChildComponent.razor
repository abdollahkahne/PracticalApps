@implements IDisposable
@inject IJSRuntime JS

<div>
    I am child component
</div>

@code {
    [Parameter]
    public string? StudentName { get; set; }
    [Parameter]
    public JSInteropEventSuscription? Subscription { get; set; }
    private ElementReference parent { get; set; }
    protected override void OnInitialized()
    {
        Console.WriteLine("Rendering Or Rerendering: I called to run (OnInit-Child Component)");
        Subscription!.ElementHasSet += getElementFromParent;
        base.OnInitialized();
    }
    // OnParameterSet run on every re-rendering too
    protected override void OnParametersSet()
    {
        Console.WriteLine("Rendering Or Rerendering: I called to run (OnParameterSet-ChildComponent)");
        base.OnParametersSet();
    }

    private async void getElementFromParent(object? sender, ElementReference element)
    {
        Console.WriteLine(@"Event handled: {0}", element.Id);
        parent = element;
        Console.WriteLine(@"Parent Reference Id: {0}", parent.Id);
        await parent.ClickElem(JS);
    }

    public void Dispose()
    {
        Subscription!.ElementHasSet -= getElementFromParent;
    }

}